/*
 * imageProcessing.c
 *
 *  Created on: 31 janv. 2013
 *      Author: pierre
 */

#include "imageProcessing.h"

int32 i,j,temp;
int32 ta[65536][2];
uint8 *YBufferForLabeling;
uint32 pixel[65536][2];
uint32 top=0;
int32 x,y;
int32 connect[2][8],sumh=0,sumw=0;

typedef struct
{
	int32 RCList[65536][2];
	int32 count;
}sObject;

sObject s;


/* --------------------------------------------------------------------------------
 _____  _____   ____   _____ ______  _____ _____   ____  ______ _____ _____ _   _
|  __ \|  __ \ / __ \ / ____|  ____|/ ____/ ____| |  _ \|  ____/ ____|_   _| \ | |
| |__) | |__) | |  | | |    | |__  | (___| (___   | |_) | |__ | |  __  | | |  \| |
|  ___/|  _  /| |  | | |    |  __|  \___ \\___ \  |  _ <|  __|| | |_ | | | | . ` |
| |    | | \ \| |__| | |____| |____ ____) |___) | | |_) | |___| |__| |_| |_| |\  |
|_|    |_|  \_\\____/ \_____|______|_____/_____/  |____/|______\_____|_____|_| \_|

   -------------------------------------------------------------------------------- */
void generateStillImage(uint8 *yBuffer,uint32 imgHeight, uint32 imgWidth)
{

	for(i=188 ; i<388 ; i++)
	{
		for(j=260 ; j<460 ; j++)
		{
			yBuffer[i*imgWidth + (j)]=255;
		}
	}

}

void fastflooding(int32 i,int32 j, uint8 *YOutputBuffer, uint32 imgHeight, uint32 imgWidth)
{
	uint8 m;
	for(m=0 ; m<8 ; m++)
	{
		if(YOutputBuffer[((i+connect[0][m])*imgWidth) + (j+connect[0][m])]==255)
		{
			s.count++;
			s.RCList[s.count][0]=i+connect[0][m];
			s.RCList[s.count][1]=j+connect[1][m];

			top++;
			pixel[top][0]=i+connect[0][m];
			pixel[top][1]=j+connect[1][m];

			sumh=sumh+(i+connect[0][m]);
			sumw=sumw+(j+connect[0][m]);

			YOutputBuffer[((i+connect[0][m])*imgWidth) + (j+connect[1][m])]=149;

		}
		else
			continue;
	}
}

void zigzag (uint8 *YOutputBuffer, uint32 imgHeight, uint32 imgWidth)
{
	int32 flag=0;
	s.count=0;
	sumh=0;
	sumw=0;

	for(i=139 ; i<imgHeight-10 ; i++)
	  {
		  for(j=10 ; j<imgWidth-10; j++)
		  {
			  if(YOutputBuffer[i*imgWidth + j]==255)
			  {
				  s.count++;
				  s.RCList[s.count][0]=i;
				  s.RCList[s.count][1]=j;

				  top++;
				  pixel[top][0]=i;
				  pixel[top][1]=j;

				  YOutputBuffer[i*imgWidth + j]=149;

				  sumh=sumh+i;
				  sumw=sumw+j;

				   while(top!=0)
				   {
					   fastflooding(i,j ,YOutputBuffer , imgHeight, imgWidth);

					   i=pixel[top][0];
					   j=pixel[top][1];
					   top--;
				   }
				   flag=1;
			  }
			  if(flag==1)
				  break;
		  }
		  if(flag==1)
			  break;
	  }

}

void dataProcessing(uint8 *inputImage, uint8 *outputImage, uint32 imgHeight, uint32 imgWidth)
{

	// put your code here...
	// for the template, we make a copy of the inputBuffer to the outputImage

	memset(outputImage,0,sizeof(uint8)*576*720);

	connect[0][0]=-1;
		connect[0][1]=-1;
		connect[0][2]=-1;
		connect[0][3]=0;
		connect[0][4]=1;
		connect[0][5]=1;
		connect[0][6]=1;
		connect[0][7]=0;

		connect[1][0]=-1;
		connect[1][1]=0;
		connect[1][2]=1;
		connect[1][3]=1;
		connect[1][4]=1;
		connect[1][5]=0;
		connect[1][6]=-1;
		connect[1][7]=-1;


	generateStillImage(outputImage, imgHeight, imgWidth);

	zigzag(outputImage, imgHeight, imgWidth);

	x=sumh/s.count;
	y=sumw/s.count;

	//memcpy(outputImage,inputImage,sizeof(uint8)*imgHeight*imgWidth);

	//negateImage(inputImage,outputImage,imgHeight,imgWidth);
	return;
}
/* --------------------------------------------------------------------------------
 _____  _____   ____   _____ ______  _____ _____   ______ _   _ _____
|  __ \|  __ \ / __ \ / ____|  ____|/ ____/ ____| |  ____| \ | |  __ \
| |__) | |__) | |  | | |    | |__  | (___| (___   | |__  |  \| | |  | |
|  ___/|  _  /| |  | | |    |  __|  \___ \\___ \  |  __| | . ` | |  | |
| |    | | \ \| |__| | |____| |____ ____) |___) | | |____| |\  | |__| |
|_|    |_|  \_\\____/ \_____|______|_____/_____/  |______|_| \_|_____/

   -------------------------------------------------------------------------------- */


// Code example for image processing : negate image (0->1, 1->0)
void negateImage(uint8 *inputImage, uint8 *outputImage, uint32 imgHeight, uint32 imgWidth) {

	uint32 il;
	uint32 *src=(uint32*)inputImage; // access memory in 32bit format (word)
	uint32 *dst=(uint32*)outputImage;
	uint32 s=_mpy(imgHeight,imgWidth)>>2; // compute word number in image

	for(il=0;il<s;il++) // negate all data from input to output
		*(dst++)=~*(src++);
	return;
}


