/*
 * imageProcessing.c
 *
 *  Created on: 31 janv. 2013
 *      Author: pierre
 */

#include "imageProcessing.h"
int32 i,j,temp=0,temp1=0;
int32 ta[65536][2];
uint8 *YBufferForLabeling;
uint32 pixel[65536][2];
uint32 top=0;
int32 connect[2][8],length=0;
int16 id=-1;
uint16 yval,cbval,crval;
int32 isEven=0,isOdd=0,isCorner=0;
uint32 sumh=0;
uint32 sumw=0,surface=0;
int32 dist[5000];
int32 side=0, psfreeman[1000];

uint32 ycbcr[10][3];

typedef struct
{
	int32 RCList[65536][2];
	int32 boundaryList[5000][2];
	int32 freemanChainCode[5000];
	int32 boundarySize;
	int32 boundingbox;
	int32 count;

}sObject;

sObject s,*object;

typedef struct
{
	uint32 x,y;
}sPoint;

sPoint startingPoint,startPoint1;
sPoint p,startPoint,p_prev,p_next,centre;

// You have to color the image as you process it so that it does fall into an infinite loop of processing the same image again and again !!
/* --------------------------------------------------------------------------------
 _____  _____   ____   _____ ______  _____ _____   ____  ______ _____ _____ _   _
|  __ \|  __ \ / __ \ / ____|  ____|/ ____/ ____| |  _ \|  ____/ ____|_   _| \ | |
| |__) | |__) | |  | | |    | |__  | (___| (___   | |_) | |__ | |  __  | | |  \| |
|  ___/|  _  /| |  | | |    |  __|  \___ \\___ \  |  _ <|  __|| | |_ | | | | . ` |
| |    | | \ \| |__| | |____| |____ ____) |___) | | |_) | |___| |__| |_| |_| |\  |
|_|    |_|  \_\\____/ \_____|______|_____/_____/  |____/|______\_____|_____|_| \_|

   -------------------------------------------------------------------------------- */

void drawCross(uint8 *ybuffer, uint32 imgHeight, uint32 imgWidth, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer)
{
	int16 c=0,v=0;

	v=centre.y;
		for(c=centre.x-10;  c<centre.x+10 ; c++)
		{
			ybuffer[c*imgWidth + v]=60;
			CbOutputBuffer[(c*imgWidth/2) + (v/2)]=24;
			CrOutputBuffer[(c*imgWidth/2) + (v/2)]=248;
		}

	c=centre.x;
		for(v=centre.y-10;  v<centre.y+10 ; v++)
		{
			ybuffer[c*imgWidth + v]=60;
			CbOutputBuffer[(c*imgWidth/2) + (v/2)]=24;
			CrOutputBuffer[(c*imgWidth/2) + (v/2)]=248;
		}
}

void meanDistance (uint8 *ybuffer, int32 imgHeight, int32 imgWidth, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer)
{
	int32 e,t=0,inc=0,dec=0,count=0,sum=0,q,w,m,n,sf=0;
	int32 tem[6], countdown=0,countup=0;
	centre.x=sumh/surface;
	centre.y=sumw/surface;
	dist[0]=0;
	side=0;

	for(e=0 ; e<6 ; e++)
	{
		tem[e]=0;
	}
	drawCross(ybuffer, imgHeight, imgWidth, CbOutputBuffer, CrOutputBuffer);

	for(e=0 ;e<1000 ; e++ )
	{
		psfreeman[e]=0;
	}

	for(e=1 ; e<s.count ; e++)
	{
		dist[e]=((centre.x-s.boundaryList[e][0])*(centre.x-s.boundaryList[e][0]) + (centre.y-s.boundaryList[e][1])*(centre.y-s.boundaryList[e][1]));
	}

	  for(w=3 ; w<8; w++)
	  {
		sf=w;
		m=1;
		n=s.count/sf;
		sum=0;
	    for(q=0 ; q<sf ; q++)
	     {
	    	inc=0;
	    	dec=0;
	    	for(e=m ; e<n ; e++)
		    {
			  if(dist[e-1] > dist[e])
			  {
				  countdown++;
				  if(countdown>8)
				  {
					  dec++;
					  countdown=0;
				  }
			  }

			  if(dist[e-1] < dist[e])
			  {
				  countup++;
				  if(countup>8)
				  {
					  inc++;
					  countup=0;
				  }
			  }
		    }

	    	sum=sum+(dec-inc);
	    	if(sum<0)
	    		sum=sum*(-1);
	    	m=n;
	    	n=n+(s.count/sf);
	     }
	    tem[count]=sum;
	    count++;
	  }


	for(e=1 ; e<s.count ; e++)
	{
		if(dist[e-1] > dist[e])
		{
			dec++;
			if(dec>8)
			{
				psfreeman[t]=1;
				t++;
				inc=0;
			}
		}

		if(dist[e-1]< dist[e])
		{
			inc++;
			if(inc>8)
			{
				psfreeman[t]=2;
				t++;
				dec=0;
			}
		}
	}

	for(e=1 ; e<=t ; e++)
	{
		if((psfreeman[e-1] - psfreeman[e]) > 0)
			side++;
	}

}

sPoint centerOfMass(uint8*yBuffer,uint32 imgHeight, uint32 imgWidth , sPoint start, uint16 thr ,uint8 *CbOutputBuffer, uint8 *CrOutputBuffer)
 {
	 uint32 surface=0,c=0,v=0;
	 uint32 sumh=0;
	 uint32 sumw=0;

	 for (c=start.x;c<imgHeight;c++)
	 {
		 for (v=start.y;v<imgWidth;v++)
		   {
			 if(yBuffer[c*imgWidth +v]==thr)
			 {
				 surface++;
				 sumh+=c;
				 sumw+=v;
			 }
	      }
	  }

	 centre.x=sumh/surface;
	 centre.y=sumw/surface;

	 drawCross(yBuffer, imgHeight, imgWidth, CbOutputBuffer, CrOutputBuffer);

	 return centre;
 }

void Threshold(uint8 *YInputBuffer, uint8 *YOutputBuffer, uint32 imgHeight, uint32 imgWidth, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer)
{
	for(i=0 ; i<imgHeight; i++)
		{
			for(j=0 ; j<imgWidth ; j++)
			{
				if(YInputBuffer[i*imgWidth + j]>88)
				{
					YOutputBuffer[i*imgWidth + j]=255;
				}
				else
					YOutputBuffer[i*imgWidth + j]=0;
			}
		}
	YBufferForLabeling = YOutputBuffer;
}

sPoint moore_domain (sPoint p, sPoint p_prev, uint8 *ybuffer, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer, uint32 imgHeight, uint32 imgWidth)
{
	int32 t=0;
	int32 m,x,f=0;

	for (m=0 ; m<8 ; m++)
	{
		if((p.x+connect[0][m]==p_prev.x) && (p.y+connect[1][m]==p_prev.y))
		{
			t=m;
			break;
		}
	}

	t++;
	if(t==8)
		t=0;

	for( m=t ; m<(t+8) ; m++)
	{
		x=m%8;

		if((ybuffer[(p.x+connect[0][x])*imgWidth + (p.y+connect[1][x])]==235))
		 {
			f=x;
			f--;
			if(f==-1)
				f=7;
			s.count++;
						p_next.x=p.x+connect[0][x];
						p_next.y=p.y+connect[1][x];

						s.boundaryList[s.count][0]=i;
						s.boundaryList[s.count][1]=j;

						/*ybuffer[(p.x+connect[0][x])*imgWidth + (p.y+connect[1][x])]=60;
						CbOutputBuffer[((p.x+connect[0][x])*imgWidth/2) + ((p.y+connect[1][x])/2)]=216;
						CrOutputBuffer[((p.x+connect[0][x])*imgWidth/2) + ((p.y+connect[1][x])/2)]=216;*/

						s.freemanChainCode[s.count]=f;

						if(s.freemanChainCode[s.count]%2 ==0)
							isEven++;

						if(s.freemanChainCode[s.count]%2 != 0)
							isOdd++;

						if(s.count>2)
						{
							if(s.freemanChainCode[s.count] - s.freemanChainCode[s.count-1] !=0 )
								isCorner++;

						}
						break;

		 }
	}

	return p_next;
}

void computeBoundingBox (uint8 *ybuffer,uint8 *CbOutputBuffer, uint8 *CrOutputBuffer, sObject *object, uint32 imgHeight, uint32 imgWidth, int16 thr)
{
	uint32 temp_min=imgWidth;
	uint32 u,h;
	temp=0,temp1=0;

	for(u=1; u<s.count ; u++)
	{
		if(temp1<s.boundaryList[u][1])
		{
			temp1=s.boundaryList[u][1];
		}
	}

	for(u=1 ; u<s.count ; u++)
	{
		if(temp_min>s.boundaryList[u][1])
		{
			temp_min=s.boundaryList[u][1];
		}
	}

	for(u=1; u<s.count ; u++)
	{
		if(temp<s.boundaryList[u][0])
		{
			temp=s.boundaryList[u][0];
		}
	}

	h=temp_min;
	for(u=startPoint.x ; u<temp ; u++)
	{
        ybuffer[u*imgWidth + h]=16;
        CbOutputBuffer[((u*imgWidth)/2) + (h/2)]=248;
        CrOutputBuffer[((u*imgWidth)/2) + (h/2)]=8;
	}

	u=startPoint.x;
	for(h=temp_min ; h<temp1 ; h++)
	{
		ybuffer[u*imgWidth + h]=16;
		        CbOutputBuffer[((u*imgWidth)/2) + (h/2)]=248;
		        CrOutputBuffer[((u*imgWidth)/2) + (h/2)]=8;
	}

	u=temp;
	for(h=temp_min ; h<temp1 ; h++)
	{
		ybuffer[u*imgWidth + h]=16;
		        CbOutputBuffer[((u*imgWidth)/2) + (h/2)]=248;
		        CrOutputBuffer[((u*imgWidth)/2) + (h/2)]=8;
	}

	 h=temp1;
	 for(u=startPoint.x ; u<temp ; u++)
	 {
		 ybuffer[u*imgWidth + h]=16;
		         CbOutputBuffer[((u*imgWidth)/2) + (h/2)]=248;
		         CrOutputBuffer[((u*imgWidth)/2) + (h/2)]=8;
	 }

}

void fastflooding(int32 i,int32 j, uint8 *YOutputBuffer, uint32 imgHeight, uint32 imgWidth, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer, uint32 yval,uint32 cbval,uint32 crval, uint16 thr)
{
	uint8 m;
	for(m=0 ; m<8 ; m++)
	{
		if(YOutputBuffer[((i+connect[0][m])*imgWidth) + (j+connect[1][m])]==thr)
		{
			s.count++;
			s.RCList[s.count][0]=connect[0][m]+i;
			s.RCList[s.count][1]=j+connect[1][m];

			top++;
			pixel[top][0]=i+connect[0][m];
			pixel[top][1]=j+connect[1][m];

			surface++;
			sumh+=(i+connect[0][m]);
			sumw+=(j+connect[1][m]);

			YOutputBuffer[((i+connect[0][m])*imgWidth) + (j+connect[1][m])]=yval;
			CbOutputBuffer[(((i+connect[0][m])*imgWidth)/2) + ((j+connect[1][m])/2)]=cbval;
			CrOutputBuffer[(((i+connect[0][m])*imgWidth)/2) + ((j+connect[1][m])/2)]=crval;

		}
		else;
	}
}

void zigzag (uint8 *YOutputBuffer, sPoint startPoint1, uint32 imgHeight, uint32 imgWidth, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer , uint16 yval, uint16 cbval, uint16 crval, uint16 thr)
{
	s.count=0;
	id=-1;
	uint8 flag=0;
	uint16 c,v;
	surface=sumh=sumw=0;


	for(c=startPoint1.x ; c<imgHeight-10 ; c++)
	  {
		  for(v=startPoint1.y ; v<imgWidth-10; v++)
		  {
			  if(YOutputBuffer[c*imgWidth + v]==thr)
			  {
	              id++;

	              s.count++;
				  s.RCList[s.count][0]=i;
				  s.RCList[s.count][1]=j;

				  top++;
				  pixel[top][0]=c;
				  pixel[top][1]=v;

				  YOutputBuffer[c*imgWidth + v]=yval;
				  CbOutputBuffer[((c*imgWidth)/2) + v/2]=cbval;
				  CrOutputBuffer[((c*imgWidth)/2) + v/2]=crval;

				  surface++;
				  sumh+=c;
				  sumw+=v;

				   while(top!=0)
				   {
					   fastflooding(c,v ,YOutputBuffer , imgHeight, imgWidth, CbOutputBuffer, CrOutputBuffer, yval, cbval, crval, thr);

					   c=pixel[top][0];
					   v=pixel[top][1];
					   top--;
				   }

                 flag=1;
			  }
			  if(flag==1)
				  break;
		  }
		  if(flag==1)
			  break;
	  }

}

void computeBoundaryList (uint8 *ybuffer, sPoint startPoint1, sObject *object, uint32 imgHeight, uint32 imgWidth,uint8 *CbOutputBuffer, uint8 *CrOutputBuffer )
{
	p_next.x=0;
	p_next.y=0;

	s.count=0;
	length=0;

	startPoint1.x=0;
	startPoint1.y=0;

	for(i=140 ; i<imgHeight-10 ; i++)
	{
		for(j=10 ; j<imgWidth-10 ; j++)
		{
			if(ybuffer[i*imgWidth + j]==ycbcr[0][0])
			{
				startPoint1.x=i;
				startPoint1.y=j;

				zigzag(ybuffer, startPoint1, imgHeight,imgWidth, CbOutputBuffer,CrOutputBuffer, ycbcr[1][0], ycbcr[1][1], ycbcr[1][2], ycbcr[0][0] );

				//centre=centerOfMass(ybuffer,imgHeight,imgWidth ,startPoint1, ycbcr[1][0], CbOutputBuffer, CrOutputBuffer);

				s.count=0;
				s.count++;
				p.x=i;
				p.y=j;
				startPoint.x=i;
				startPoint.y=j;
				s.boundaryList[s.count][0]=i;
				s.boundaryList[s.count][1]=j;

				while (p_next.x!= startPoint.x || p_next.y!=startPoint.y)
				{
					if (s.count==1)
					{
						p_prev.x=p.x;
						p_prev.y=p.y-1;

						p_next=moore_domain(p, p_prev, ybuffer, CbOutputBuffer,CrOutputBuffer,imgHeight, imgWidth);
						s.boundaryList[s.count][0]=p.x;
						s.boundaryList[s.count][1]=p.y;

					    p_prev=p;
					    p=p_next;
						continue;
					}
					else
						p_next=moore_domain(p,p_prev,ybuffer, CbOutputBuffer,CrOutputBuffer, imgHeight, imgWidth);

					s.boundaryList[s.count][0]=p.x;
					s.boundaryList[s.count][1]=p.y;

					p_prev=p;
					p=p_next;
				}

				computeBoundingBox (ybuffer, CbOutputBuffer, CrOutputBuffer, object, imgHeight, imgWidth, ycbcr[1][0]);
				meanDistance(ybuffer, imgHeight, imgWidth, CbOutputBuffer, CrOutputBuffer);
				s.count=0;
				p_next.x=0;
				p_next.y=0;
			}

		}
	}

	length= (isEven*98/100) + (isOdd*1406/1000) - (isCorner*91/1000);

}

void roi(uint8 *ybuffer, uint32 imgWidth, uint32 imgHeight, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer)
{
	uint16 w;
	uint16 id1=0;

	uint32 a,s;

	a=140;
		for(s=164 ; s<566 ; s++)
		{
			ybuffer[a*imgWidth + s]=60;
			CbOutputBuffer[(a*imgWidth/2)+(s/2)]=24;
			CrOutputBuffer[(a*imgWidth/2)+(s/2)]=248;
		}

	a=421;
	for(s=164 ; s<566 ; s++)
			{
		ybuffer[a*imgWidth + s]=60;
					CbOutputBuffer[(a*imgWidth/2)+(s/2)]=24;
					CrOutputBuffer[(a*imgWidth/2)+(s/2)]=248;
			}

	s=164;
	for(a=140 ; a<421 ; a++)
	{
		ybuffer[a*imgWidth + s]=60;
							CbOutputBuffer[(a*imgWidth/2)+(s/2)]=24;
							CrOutputBuffer[(a*imgWidth/2)+(s/2)]=248;
	}

	s=566;
	for(a=140 ; a<421 ; a++)
		{
		ybuffer[a*imgWidth + s]=60;
							CbOutputBuffer[(a*imgWidth/2)+(s/2)]=24;
							CrOutputBuffer[(a*imgWidth/2)+(s/2)]=248;
		}




	for(a=140 ; a<418 ; a++)
	{
		for(s=181 ; s<559 ; s++)
		{
			if(ybuffer[a*imgWidth + s]==235)
			{
				again:
				id1++;
				w=id1%9;
				if(w<2)
					goto again;

				yval=ycbcr[w][0];
				cbval=ycbcr[w][1];
				crval=ycbcr[w][2];

				startPoint1.x=a;
				startPoint1.y=s;

				zigzag(ybuffer, startPoint1, imgHeight,imgWidth, CbOutputBuffer,CrOutputBuffer, yval,cbval,crval, 235 );


					centre.x=sumh/surface;
					centre.y=sumw/surface;
				    drawCross(ybuffer, imgHeight, imgWidth, CbOutputBuffer, CrOutputBuffer);
			}
			else;
		}
	}
}

void dataProcessing(uint8 *YInputBuffer, uint8 *YOutputBuffer, uint8 *CbOutputBuffer, uint8 *CrOutputBuffer, uint32 imgHeight, uint32 imgWidth) {
	// put your code here...
	// for the template, we make a copy of the inputBuffer to the outputImage
	memset(CbOutputBuffer,128,(sizeof(uint8)*imgHeight*imgWidth)/2);
	memset(CrOutputBuffer,128,(sizeof(uint8)*imgHeight*imgWidth)/2);

	connect[0][0]=-1;
	connect[0][1]=-1;
	connect[0][2]=-1;
	connect[0][3]=0;
	connect[0][4]=1;
	connect[0][5]=1;
	connect[0][6]=1;
	connect[0][7]=0;

	connect[1][0]=-1;
	connect[1][1]=0;
	connect[1][2]=1;
	connect[1][3]=1;
	connect[1][4]=1;
	connect[1][5]=0;
	connect[1][6]=-1;
	connect[1][7]=-1;

	isEven=isOdd=isCorner=0;

	ycbcr[0][0]=255; ycbcr[0][1]=0; ycbcr[0][2]=0;
	ycbcr[1][0]=235; ycbcr[1][1]=184; ycbcr[1][2]=72;

	ycbcr[2][0]=191; ycbcr[2][1]=104; ycbcr[2][2]=152;
	ycbcr[3][0]=191; ycbcr[3][1]=24; ycbcr[3][2]=200;
	ycbcr[4][0]=16; ycbcr[4][1]=200; ycbcr[4][2]=232;
	ycbcr[5][0]=60; ycbcr[5][1]=40; ycbcr[5][2]=24;
	ycbcr[6][0]=147; ycbcr[6][1]=88; ycbcr[6][2]=232;
	ycbcr[7][0]=60; ycbcr[7][1]=200; ycbcr[7][2]=248;
	ycbcr[8][0]=104; ycbcr[8][1]=8; ycbcr[8][2]=8;
	ycbcr[9][0]=235; ycbcr[9][1]=72; ycbcr[9][2]=56;

	for(i=0 ; i<5000 ; i++)
	{
		s.boundaryList[i][0]=s.boundaryList[i][1]=0;
	}

	Threshold(YInputBuffer, YOutputBuffer, imgHeight,imgWidth, CbOutputBuffer, CrOutputBuffer);

 //   zigzag(YInputBuffer, YOutputBuffer, imgHeight,imgWidth, CbOutputBuffer,CrOutputBuffer, yval, cbval, crval);

    computeBoundaryList (YOutputBuffer, startPoint1, object, imgHeight,imgWidth ,CbOutputBuffer, CrOutputBuffer);

   // roi(YOutputBuffer, imgWidth, imgHeight , CbOutputBuffer, CrOutputBuffer);


  //  memcpy(YOutputBuffer,YInputBuffer,sizeof(uint8)*imgHeight*imgWidth);
	return;
}
/* --------------------------------------------------------------------------------
 _____  _____   ____   _____ ______  _____ _____   ______ _   _ _____
|  __ \|  __ \ / __ \ / ____|  ____|/ ____/ ____| |  ____| \ | |  __ \
| |__) | |__) | |  | | |    | |__  | (___| (___   | |__  |  \| | |  | |
|  ___/|  _  /| |  | | |    |  __|  \___ \\___ \  |  __| | . ` | |  | |
| |    | | \ \| |__| | |____| |____ ____) |___) | | |____| |\  | |__| |
|_|    |_|  \_\\____/ \_____|______|_____/_____/  |______|_| \_|_____/

   -------------------------------------------------------------------------------- */

